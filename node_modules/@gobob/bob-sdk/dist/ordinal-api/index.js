"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DefaultOrdinalsClient = exports.SatPoint = exports.OutPoint = exports.InscriptionId = exports.TESTNET_ORD_BASE_PATH = exports.MAINNET_ORD_BASE_PATH = exports.REGTEST_ORD_BASE_PATH = void 0;
exports.REGTEST_ORD_BASE_PATH = "http://0.0.0.0:3003";
exports.MAINNET_ORD_BASE_PATH = "https://ordinals-mainnet.gobob.xyz";
exports.TESTNET_ORD_BASE_PATH = "https://ordinals-testnet.gobob.xyz";
var InscriptionId;
(function (InscriptionId) {
    function toString(id) {
        return `${id.txid}i${id.index}`;
    }
    InscriptionId.toString = toString;
    function fromString(id) {
        const [txid, index] = id.split("i");
        return {
            txid,
            index: parseInt(index, 10),
        };
    }
    InscriptionId.fromString = fromString;
})(InscriptionId || (exports.InscriptionId = InscriptionId = {}));
var OutPoint;
(function (OutPoint) {
    function toString(id) {
        return `${id.txid}:${id.vout}`;
    }
    OutPoint.toString = toString;
    function fromString(id) {
        const [txid, vout] = id.split(":");
        return {
            txid,
            vout: parseInt(vout, 10),
        };
    }
    OutPoint.fromString = fromString;
})(OutPoint || (exports.OutPoint = OutPoint = {}));
var SatPoint;
(function (SatPoint) {
    function toString(id) {
        return `${OutPoint.toString(id.outpoint)}:${id.offset}`;
    }
    SatPoint.toString = toString;
    function fromString(id) {
        const [txid, vout, offset] = id.split(":");
        return {
            outpoint: {
                txid,
                vout: parseInt(vout, 10),
            },
            offset: parseInt(offset, 10),
        };
    }
    SatPoint.fromString = fromString;
})(SatPoint || (exports.SatPoint = SatPoint = {}));
class DefaultOrdinalsClient {
    constructor(networkOrUrl = "mainnet") {
        switch (networkOrUrl) {
            case "mainnet":
                this.basePath = exports.MAINNET_ORD_BASE_PATH;
                break;
            case "testnet":
                this.basePath = exports.TESTNET_ORD_BASE_PATH;
                break;
            case "regtest":
                this.basePath = exports.REGTEST_ORD_BASE_PATH;
                break;
            default:
                this.basePath = networkOrUrl;
        }
    }
    async getInscriptionFromId(id) {
        const inscriptionJson = await this.getJson(`${this.basePath}/inscription/${InscriptionId.toString(id)}`);
        return Object.assign(Object.assign({}, inscriptionJson), { children: inscriptionJson.children.map(InscriptionId.fromString), inscription_id: InscriptionId.fromString(inscriptionJson.inscription_id), next: (inscriptionJson.next != null) ? InscriptionId.fromString(inscriptionJson.next) : null, parent: (inscriptionJson.parent != null) ? InscriptionId.fromString(inscriptionJson.parent) : null, previous: (inscriptionJson.previous != null) ? InscriptionId.fromString(inscriptionJson.previous) : null, satpoint: SatPoint.fromString(inscriptionJson.satpoint) });
    }
    async getInscriptions() {
        const inscriptionsJson = await this.getJson(`${this.basePath}/inscriptions`);
        return this.parseInscriptionsJson(inscriptionsJson);
    }
    async getInscriptionsFromBlock(height) {
        const inscriptionsJson = await this.getJson(`${this.basePath}/inscriptions/block/${height}`);
        return this.parseInscriptionsJson(inscriptionsJson);
    }
    async getInscriptionsFromOutPoint(outPoint) {
        return await this.getJson(`${this.basePath}/output/${OutPoint.toString(outPoint)}`);
    }
    async getInscriptionsFromSat(sat) {
        const satJson = await this.getJson(`${this.basePath}/sat/${sat}`);
        return Object.assign(Object.assign({}, satJson), { inscriptions: satJson.inscriptions.map(id => InscriptionId.fromString(id)) });
    }
    async getInscriptionsFromStartBlock(startHeight) {
        const inscriptionsJson = await this.getJson(`${this.basePath}/inscriptions/${startHeight}`);
        return this.parseInscriptionsJson(inscriptionsJson);
    }
    async getJson(url) {
        const response = await fetch(url, {
            headers: {
                'Accept': 'application/json',
            },
        });
        if (!response.ok) {
            throw new Error(response.statusText);
        }
        return await response.json();
    }
    parseInscriptionsJson(inscriptionsJson) {
        const ids = inscriptionsJson.inscriptions.map(id => InscriptionId.fromString(id));
        return Object.assign(Object.assign({}, inscriptionsJson), { inscriptions: ids });
    }
}
exports.DefaultOrdinalsClient = DefaultOrdinalsClient;
//# sourceMappingURL=index.js.map