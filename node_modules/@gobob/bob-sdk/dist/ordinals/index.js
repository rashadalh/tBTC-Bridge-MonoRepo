"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.inscribeData = exports.createTextInscription = exports.createInscription = void 0;
const bitcoin = __importStar(require("bitcoinjs-lib"));
const signer_1 = require("./signer");
const commit_1 = require("./commit");
Object.defineProperty(exports, "createInscription", { enumerable: true, get: function () { return commit_1.createInscription; } });
Object.defineProperty(exports, "createTextInscription", { enumerable: true, get: function () { return commit_1.createTextInscription; } });
const reveal_1 = require("./reveal");
function estimateTxSize(network, publicKey, commitTxData, toAddress, amount) {
    const psbt = new bitcoin.Psbt({ network });
    const { scriptTaproot, tapLeafScript } = commitTxData;
    psbt.addInput({
        hash: Buffer.alloc(32, 0),
        index: 0,
        witnessUtxo: {
            value: amount,
            script: scriptTaproot.output,
        },
        tapLeafScript: [tapLeafScript],
    });
    psbt.addOutput({
        value: amount,
        address: toAddress,
    });
    psbt.signInput(0, new signer_1.DummySigner(publicKey));
    psbt.finalizeInput(0, (0, reveal_1.customFinalizer)(commitTxData));
    const tx = psbt.extractTransaction();
    return tx.virtualSize();
}
async function inscribeData(signer, toAddress, feeRate, inscription, postage = 10000) {
    const bitcoinNetwork = await signer.getNetwork();
    const publicKey = Buffer.from(await signer.getPublicKey(), "hex");
    const commitTxData = (0, commit_1.createCommitTxData)(bitcoinNetwork, publicKey, inscription);
    const revealTxSize = estimateTxSize(bitcoinNetwork, publicKey, commitTxData, toAddress, postage);
    const revealFee = revealTxSize * feeRate;
    const commitTxAmount = revealFee + postage;
    const commitAddress = commitTxData.scriptTaproot.address;
    const commitTxId = await signer.sendToAddress(commitAddress, commitTxAmount);
    const commitTx = await signer.getTransaction(commitTxId);
    const scriptPubKey = bitcoin.address.toOutputScript(commitAddress, bitcoinNetwork);
    const commitUtxoIndex = commitTx.outs.findIndex(out => out.script.equals(scriptPubKey));
    const commitTxResult = {
        tx: commitTx,
        outputIndex: commitUtxoIndex,
        outputAmount: commitTxAmount,
    };
    const revealPsbt = (0, reveal_1.createRevealTx)(bitcoinNetwork, commitTxData, commitTxResult, toAddress, postage);
    const revealTx = await (0, reveal_1.signRevealTx)(signer, commitTxData, revealPsbt);
    return revealTx;
}
exports.inscribeData = inscribeData;
//# sourceMappingURL=index.js.map