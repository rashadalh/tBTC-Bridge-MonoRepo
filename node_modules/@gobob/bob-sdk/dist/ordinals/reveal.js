"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.signRevealTx = exports.customFinalizer = exports.createRevealTx = void 0;
const bitcoin = __importStar(require("bitcoinjs-lib"));
const psbtUtils = __importStar(require("bitcoinjs-lib/src/psbt/psbtutils"));
const { witnessStackToScriptWitness } = psbtUtils;
function createRevealTx(network, commitTxData, commitTxResult, toAddress, amount) {
    const { scriptTaproot, tapLeafScript } = commitTxData;
    const psbt = new bitcoin.Psbt({ network });
    psbt.addInput({
        hash: commitTxResult.tx.getId(),
        index: commitTxResult.outputIndex,
        witnessUtxo: {
            value: commitTxResult.outputAmount,
            script: scriptTaproot.output,
        },
        nonWitnessUtxo: commitTxResult.tx.toBuffer(),
        tapLeafScript: [tapLeafScript],
    });
    psbt.addOutput({
        value: amount,
        address: toAddress,
    });
    return psbt;
}
exports.createRevealTx = createRevealTx;
const customFinalizer = (commitTxData) => {
    const { tapLeafScript } = commitTxData;
    return (inputIndex, input) => {
        const witness = [input.tapScriptSig[inputIndex].signature]
            .concat(tapLeafScript.script)
            .concat(tapLeafScript.controlBlock);
        return {
            finalScriptWitness: witnessStackToScriptWitness(witness),
        };
    };
};
exports.customFinalizer = customFinalizer;
async function signRevealTx(signer, commitTxData, psbt) {
    psbt = await signer.signInput(0, psbt);
    psbt.finalizeInput(0, (0, exports.customFinalizer)(commitTxData));
    return psbt.extractTransaction();
}
exports.signRevealTx = signRevealTx;
//# sourceMappingURL=reveal.js.map