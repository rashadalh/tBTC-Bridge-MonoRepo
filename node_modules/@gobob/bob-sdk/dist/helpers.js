"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getInscriptionIds = void 0;
const inscription_1 = require("./inscription");
const ordinal_api_1 = require("./ordinal-api");
const bitcoin = __importStar(require("bitcoinjs-lib"));
async function getInscriptionIds(electrsClient, ordinalsClient, bitcoinAddress) {
    const utxos = await electrsClient.getAddressUtxos(bitcoinAddress);
    const inscriptionIds = await Promise.all(utxos.sort((a, b) => {
        const heightA = a.height || Number.MAX_SAFE_INTEGER;
        const heightB = b.height || Number.MAX_SAFE_INTEGER;
        return heightA - heightB;
    }).map(utxo => getInscriptionIdsForUtxo(electrsClient, ordinalsClient, utxo)));
    return inscriptionIds.flat();
}
exports.getInscriptionIds = getInscriptionIds;
async function getInscriptionIdsForUtxo(electrsClient, ordinalsClient, utxo) {
    if (utxo.confirmed) {
        const outputJson = await ordinalsClient.getInscriptionsFromOutPoint(utxo);
        return outputJson.inscriptions;
    }
    const txHex = await electrsClient.getTransactionHex(utxo.txid);
    const tx = bitcoin.Transaction.fromHex(txHex);
    if (utxo.vout == 0) {
        const parentInscriptions = await Promise.all(tx.ins.map(async (txInput) => {
            const txid = txInput.hash.reverse().toString("hex");
            const outputJson = await ordinalsClient.getInscriptionsFromOutPoint({ txid, vout: txInput.index });
            return outputJson.inscriptions;
        }));
        const inscriptionIds = parentInscriptions.flat();
        if (inscriptionIds.length > 0) {
            return inscriptionIds;
        }
    }
    const inscriptions = (0, inscription_1.parseInscriptions)(tx);
    if (utxo.vout != 0) {
        return [];
    }
    else {
        return inscriptions.map((_, index) => ordinal_api_1.InscriptionId.toString({ txid: utxo.txid, index }));
    }
}
//# sourceMappingURL=helpers.js.map