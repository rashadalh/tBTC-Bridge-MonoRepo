export declare const REGTEST_ORD_BASE_PATH = "http://0.0.0.0:3003";
export declare const MAINNET_ORD_BASE_PATH = "https://ordinals-mainnet.gobob.xyz";
export declare const TESTNET_ORD_BASE_PATH = "https://ordinals-testnet.gobob.xyz";
export type InscriptionId = {
    txid: string;
    index: number;
};
export declare namespace InscriptionId {
    function toString(id: InscriptionId): string;
    function fromString(id: string): InscriptionId;
}
export type OutPoint = {
    txid: string;
    vout: number;
};
export declare namespace OutPoint {
    function toString(id: OutPoint): string;
    function fromString(id: string): OutPoint;
}
export type SatPoint = {
    outpoint: OutPoint;
    offset: number;
};
export declare namespace SatPoint {
    function toString(id: SatPoint): string;
    function fromString(id: string): SatPoint;
}
export interface InscriptionsJson<InscriptionId> {
    inscriptions: InscriptionId[];
    prev: number | null;
    next: number | null;
    lowest: number | null;
    highest: number | null;
}
export interface OutputJson {
    value: number;
    script_pubkey: string;
    address: string | null;
    transaction: string;
    sat_ranges: string | null;
    inscriptions: string[];
    runes: Record<string, number>;
}
export interface SatJson<InscriptionId> {
    number: number;
    decimal: string;
    degree: string;
    name: string;
    block: number;
    cycle: number;
    epoch: number;
    period: number;
    offset: number;
    rarity: string;
    percentile: string;
    satpoint: string | null;
    timestamp: number;
    inscriptions: InscriptionId[];
}
export interface InscriptionJson<InscriptionId, SatPoint> {
    address: string | null;
    children: InscriptionId[];
    content_length: number | null;
    content_type: string | null;
    genesis_fee: number;
    genesis_height: number;
    inscription_id: InscriptionId;
    inscription_number: number;
    next: InscriptionId | null;
    output_value: number | null;
    parent: InscriptionId | null;
    previous: InscriptionId | null;
    rune: string | null;
    sat: string | null;
    satpoint: SatPoint;
    timestamp: number;
}
export interface OrdinalsClient {
    getInscriptionFromId(id: InscriptionId): Promise<InscriptionJson<InscriptionId, SatPoint>>;
    getInscriptions(): Promise<InscriptionsJson<InscriptionId>>;
    getInscriptionsFromBlock(height: number): Promise<InscriptionsJson<InscriptionId>>;
    getInscriptionsFromOutPoint(outPoint: OutPoint): Promise<OutputJson>;
    getInscriptionsFromSat(sat: number): Promise<SatJson<InscriptionId>>;
    getInscriptionsFromStartBlock(startHeight: number): Promise<InscriptionsJson<InscriptionId>>;
}
export declare class DefaultOrdinalsClient implements OrdinalsClient {
    private basePath;
    constructor(networkOrUrl?: string);
    getInscriptionFromId(id: InscriptionId): Promise<InscriptionJson<InscriptionId, SatPoint>>;
    getInscriptions(): Promise<InscriptionsJson<InscriptionId>>;
    getInscriptionsFromBlock(height: number): Promise<InscriptionsJson<InscriptionId>>;
    getInscriptionsFromOutPoint(outPoint: OutPoint): Promise<OutputJson>;
    getInscriptionsFromSat(sat: number): Promise<SatJson<InscriptionId>>;
    getInscriptionsFromStartBlock(startHeight: number): Promise<InscriptionsJson<InscriptionId>>;
    getJson<T>(url: string): Promise<T>;
    parseInscriptionsJson(inscriptionsJson: InscriptionsJson<string>): InscriptionsJson<InscriptionId>;
}
